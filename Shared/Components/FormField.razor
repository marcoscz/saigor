@using MudBlazor

<MudTextField @bind-Value="Value" 
              Label="@Label" 
              Required="@Required" 
              Immediate="@Immediate" 
              Disabled="@Disabled"
              Variant="@Variant"
              Margin="@Margin"
              FullWidth="@FullWidth"
              Placeholder="@Placeholder"
              HelperText="@HelperText"
              Error="@Error"
              ErrorText="@ErrorText"
              @attributes="@AdditionalAttributes" />

@code {
    [Parameter] public string Label { get; set; } = string.Empty;
    [Parameter] public string Value { get; set; } = string.Empty;
    [Parameter] public EventCallback<string> ValueChanged { get; set; }
    [Parameter] public bool Required { get; set; } = false;
    [Parameter] public bool Immediate { get; set; } = true;
    [Parameter] public bool Disabled { get; set; } = false;
    [Parameter] public Variant Variant { get; set; } = Variant.Outlined;
    [Parameter] public Margin Margin { get; set; } = Margin.None;
    [Parameter] public bool FullWidth { get; set; } = true;
    [Parameter] public string Placeholder { get; set; } = string.Empty;
    [Parameter] public string HelperText { get; set; } = string.Empty;
    [Parameter] public bool Error { get; set; } = false;
    [Parameter] public string ErrorText { get; set; } = string.Empty;
    [Parameter(CaptureUnmatchedValues = true)] public Dictionary<string, object> AdditionalAttributes { get; set; } = new();

    private string _value = string.Empty;

    protected override void OnParametersSet()
    {
        _value = Value;
    }

    private async Task OnValueChanged(string newValue)
    {
        _value = newValue;
        await ValueChanged.InvokeAsync(newValue);
    }
} 