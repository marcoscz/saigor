@page "/tarefas/edit/{id:int}"
@using MudBlazor
@inherits Saigor.Pages.Shared.BasePage
@inject ITarefaRepository TarefaRepository

<MudContainer MaxWidth="MaxWidth.Medium" Class="mt-3">
    <MudCard>
        <MudCardHeader>
            <MudText Typo="Typo.h5">Editar Tarefa</MudText>
        </MudCardHeader>
        <MudCardContent>
            @if (IsLoading)
            {
                <div class="d-flex align-center justify-center">
                    <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
                    <MudText Class="ml-4">Carregando...</MudText>
                </div>
            }
            else
            {
                <TarefaForm Tarefa="@tarefa" IsProcessing="@isProcessing" OnValidSubmit="SalvarAsync" OnCancel="Cancelar" />
            }
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    [Parameter] public int id { get; set; }
    private TarefaModel tarefa = new();
    private bool isProcessing;

    protected override async Task OnInitializedAsync()
    {
        await ExecuteWithLoadingAsync(async () =>
        {
            var found = (await TarefaRepository.GetAllAsync()).FirstOrDefault(t => t.Id == id);
            if (found is not null)
                tarefa = found;
            else
            {
                ShowError("Tarefa nÃ£o encontrada.");
                NavigateTo("/tarefas");
            }
        }, "Erro ao carregar tarefa");
    }

    private async Task SalvarAsync()
    {
        if (isProcessing) return;
        await ExecuteWithLoadingAsync(async () =>
        {
            isProcessing = true;
            TarefaRepository.Update(tarefa);
            await TarefaRepository.SaveChangesAsync();
            ShowSuccess("Tarefa salva com sucesso!");
            NavigateTo("/tarefas");
        }, "Erro ao salvar a tarefa");
        isProcessing = false;
    }

    private void Cancelar()
    {
        if (!isProcessing)
            NavigateTo("/tarefas");
    }
} 