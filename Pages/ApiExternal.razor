@page "/api-external"
@inject ExternalApiService ApiService
@using Microsoft.AspNetCore.Components.Forms
@using System.ComponentModel.DataAnnotations

<PageTitle>API Externa</PageTitle>

<h3>Consumir API Externa</h3>

<EditForm Model="@FormModel" OnValidSubmit="OnSubmit">
    <DataAnnotationsValidator />
    <ValidationSummary />
    <div class="mb-3">
        <label for="api-url">URL da API</label>
        <InputText id="api-url" class="form-control" @bind-Value="FormModel.ApiUrl" required aria-required="true" aria-label="URL da API" />
        <ValidationMessage For="@(() => FormModel.ApiUrl)" />
    </div>
    <div class="mb-3">
        <label for="api-token">Token</label>
        <InputText id="api-token" class="form-control" @bind-Value="FormModel.Token" required aria-required="true" aria-label="Token de autenticação" />
        <ValidationMessage For="@(() => FormModel.Token)" />
    </div>
    <button class="btn btn-primary" type="submit" disabled="@IsLoading" aria-busy="@IsLoading">Consumir API</button>
</EditForm>

@if (IsLoading)
{
    <p aria-live="polite">Carregando...</p>
}
@if (!string.IsNullOrEmpty(ApiResult))
{
    <div class="mt-3">
        <label>Resultado:</label>
        <pre>@ApiResult</pre>
    </div>
}
@if (!string.IsNullOrEmpty(ErrorMessage))
{
    <div class="alert alert-danger mt-3" role="alert">@ErrorMessage</div>
}

@code {
    private ApiExternalFormModel FormModel { get; set; } = new();
    public string? ApiResult { get; set; }
    public string? ErrorMessage { get; set; }
    public bool IsLoading { get; set; }

    private async Task OnSubmit()
    {
        ApiResult = null;
        ErrorMessage = null;
        IsLoading = true;
        try
        {
            var result = await ApiService.GetAsync(FormModel.ApiUrl, FormModel.Token);
            if (!string.IsNullOrWhiteSpace(result))
            {
                ApiResult = result;
            }
            else
            {
                ErrorMessage = "Erro ao consumir a API externa.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro: {ex.Message}";
        }
        finally
        {
            IsLoading = false;
        }
    }

    public class ApiExternalFormModel
    {
        [Required(ErrorMessage = "A URL é obrigatória")]
        [Url(ErrorMessage = "URL inválida")]
        public string ApiUrl { get; set; } = string.Empty;

        [Required(ErrorMessage = "O token é obrigatório")]
        public string Token { get; set; } = string.Empty;
    }
} 