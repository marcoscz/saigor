@page "/workers/edit/{id:int}"
@using MudBlazor
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

@if (isLoading)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-3">
        <MudCard>
            <MudCardContent>
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                <MudText Class="ml-3">Carregando...</MudText>
            </MudCardContent>
        </MudCard>
    </MudContainer>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-3">
        <MudAlert Severity="Severity.Error">@ErrorMessage</MudAlert>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancelar" Class="mt-2">Voltar</MudButton>
    </MudContainer>
}
else if (worker != null)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-3">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h5">Editar Worker</MudText>
            </MudCardHeader>
            <MudCardContent>
                <EditForm Model="@worker" OnValidSubmit="Salvar">
                    <DataAnnotationsValidator />
                    <MudGrid Spacing="2">
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Nome" @bind-Value="worker.Name" For="@(() => worker.Name)" Required="true" />
                        </MudItem>
                        <MudItem xs="12" sm="6">
                            <MudTextField Label="Status" @bind-Value="worker.Status" For="@(() => worker.Status)" />
                        </MudItem>
                    </MudGrid>
                    <MudCardActions Class="mt-4">
                        <MudButton ButtonType="ButtonType.Submit" Variant="Variant.Filled" Color="Color.Primary" Disabled="@isProcessing">
                            @if (isProcessing)
                            {
                                <MudProgressCircular Size="Size.Small" Indeterminate="true" Color="Color.Inherit" />
                                <span class="ml-2">Salvando...</span>
                            }
                            else
                            {
                                <span>Salvar</span>
                            }
                        </MudButton>
                        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancelar" Class="ml-2" Disabled="@isProcessing">Cancelar</MudButton>
                    </MudCardActions>
                </EditForm>
            </MudCardContent>
        </MudCard>
    </MudContainer>
}

@code {
    [Parameter] public int id { get; set; }
    private Worker? worker;
    private bool isLoading = true;
    private bool isProcessing;
    private string? ErrorMessage;

    /// <summary>
    /// Inicializa o componente e carrega o worker para edição.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            worker = await DbContext.Workers.FindAsync(id);
            if (worker == null)
            {
                ErrorMessage = "Worker não encontrado.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao carregar worker: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Salva as alterações do worker no banco de dados.
    /// </summary>
    private async Task Salvar()
    {
        if (isProcessing || worker == null) return;
        try
        {
            isProcessing = true;
            await DbContext.SaveChangesAsync();
            Navigation.NavigateTo("/workers");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao salvar worker: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    /// <summary>
    /// Cancela a edição e retorna para a lista de workers.
    /// </summary>
    private void Cancelar()
    {
        Navigation.NavigateTo("/workers");
    }
}
