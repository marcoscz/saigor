@page "/workers/delete/{id:int}"
@using MudBlazor
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

@if (isLoading)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-3">
        <MudCard>
            <MudCardContent>
                <MudProgressCircular Indeterminate="true" Color="Color.Primary" />
                <MudText Class="ml-3">Carregando...</MudText>
            </MudCardContent>
        </MudCard>
    </MudContainer>
}
else if (!string.IsNullOrEmpty(ErrorMessage))
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-3">
        <MudAlert Severity="Severity.Error">@ErrorMessage</MudAlert>
        <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancelar" Class="mt-2">Voltar</MudButton>
    </MudContainer>
}
else if (worker != null)
{
    <MudContainer MaxWidth="MaxWidth.Medium" Class="mt-3">
        <MudCard>
            <MudCardHeader>
                <MudText Typo="Typo.h5">Excluir Worker</MudText>
            </MudCardHeader>
            <MudCardContent>
                <MudText>
                    Tem certeza que deseja excluir o worker <strong>@worker.Name</strong>?
                </MudText>
                <MudText Typo="Typo.body2" Color="Color.Warning" Class="mt-2">
                    Esta ação não pode ser desfeita.
                </MudText>
            </MudCardContent>
            <MudCardActions>
                <MudButton Variant="Variant.Filled" Color="Color.Error" OnClick="Excluir" Disabled="@isProcessing">
                    @if (isProcessing)
                    {
                        <MudProgressCircular Size="Size.Small" Indeterminate="true" Color="Color.Inherit" />
                        <span class="ml-2">Excluindo...</span>
                    }
                    else
                    {
                        <span>Excluir</span>
                    }
                </MudButton>
                <MudButton Variant="Variant.Outlined" Color="Color.Secondary" OnClick="Cancelar" Disabled="@isProcessing">Cancelar</MudButton>
            </MudCardActions>
        </MudCard>
    </MudContainer>
}

@code {
    [Parameter] public int id { get; set; }
    private Worker? worker;
    private bool isLoading = true;
    private bool isProcessing;
    private string? ErrorMessage;

    /// <summary>
    /// Inicializa o componente e carrega o worker para exclusão.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        try
        {
            worker = await DbContext.Workers.FindAsync(id);
            if (worker == null)
            {
                ErrorMessage = "Worker não encontrado.";
            }
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao carregar worker: {ex.Message}";
        }
        finally
        {
            isLoading = false;
        }
    }

    /// <summary>
    /// Exclui o worker do banco de dados.
    /// </summary>
    private async Task Excluir()
    {
        if (isProcessing || worker == null) return;
        try
        {
            isProcessing = true;
            DbContext.Workers.Remove(worker);
            await DbContext.SaveChangesAsync();
            Navigation.NavigateTo("/workers");
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao excluir worker: {ex.Message}";
        }
        finally
        {
            isProcessing = false;
        }
    }

    /// <summary>
    /// Cancela a exclusão e retorna para a lista de workers.
    /// </summary>
    private void Cancelar() => Navigation.NavigateTo("/workers");
}
