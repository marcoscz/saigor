@page "/jobs"
@using MudBlazor
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation
@inject JobSchedulerService JobScheduler

<MudText Typo="Typo.h5" Class="mb-4">Jobs</MudText>

<MudAlert Severity="Severity.Info" Elevation="0" Dense="true" Class="mb-2" Style="@AlertStyle">
    @AlertMessage
</MudAlert>
<MudAlert Severity="Severity.Error" Elevation="0" Dense="true" Class="mb-2" Style="@ErrorAlertStyle">
    @ErrorMessage
</MudAlert>

<MudButton Variant="Variant.Filled" Color="Color.Primary" OnClick="CreateJob" StartIcon="@Icons.Material.Filled.Add" Class="mb-3">
    Novo Job
</MudButton>

<MudTable Items="jobs" Hover="true" Dense="true" Elevation="1" Class="mb-4">
    <HeaderContent>
        <MudTh>Nome</MudTh>
        <MudTh>Comando</MudTh>
        <MudTh>Agendamento</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Última Execução</MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Nome">@context.Name</MudTd>
        <MudTd DataLabel="Comando">@context.Command</MudTd>
        <MudTd DataLabel="Agendamento">@context.Schedule</MudTd>
        <MudTd DataLabel="Status">
            <MudChip T="string" Color="@GetStatusColor(context.Status)" Variant="Variant.Filled" Size="Size.Small">
                @context.Status
            </MudChip>
        </MudTd>
        <MudTd DataLabel="Última Execução">@context.LastExecution?.ToString("dd/MM/yyyy HH:mm")</MudTd>
        <MudTd DataLabel="Ações">
            <MudButton Variant="Variant.Outlined" Color="Color.Warning" Size="Size.Small" OnClick="@(() => EditJob(context.Id))" StartIcon="@Icons.Material.Filled.Edit">Editar</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="@(() => DeleteJob(context.Id))" StartIcon="@Icons.Material.Filled.Delete" Class="ml-2">Excluir</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Primary" Size="Size.Small" OnClick="@(() => IniciarJob(context.Name ?? string.Empty))" StartIcon="@Icons.Material.Filled.PlayArrow" Class="ml-2">Iniciar</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small" OnClick="@(() => PararJob(context.Name ?? string.Empty))" StartIcon="@Icons.Material.Filled.Stop" Class="ml-2">Parar</MudButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText Class="m-4">Nenhum job encontrado.</MudText>
    </NoRecordsContent>
</MudTable>

<MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="@ProgressStyle" />

@code {
    private List<Job> jobs = new();
    private string? AlertMessage;
    private string? ErrorMessage;
    private bool isLoading = true;

    /// <summary>
    /// Inicializa o componente e carrega os jobs.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadJobsAsync();
        isLoading = false;
    }

    /// <summary>
    /// Carrega a lista de jobs do banco de dados.
    /// </summary>
    private async Task LoadJobsAsync()
    {
        try
        {
            jobs = await Task.Run(() => DbContext.Jobs.OrderByDescending(j => j.LastExecution).ToList());
            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao carregar jobs: {ex.Message}";
        }
    }

    /// <summary>
    /// Inicia um job pelo nome.
    /// </summary>
    private async Task IniciarJob(string jobName)
    {
        bool sucesso = await JobScheduler.StartJobAsync(jobName);
        if (sucesso)
        {
            AlertMessage = $"Job '{jobName}' iniciado com sucesso.";
        }
        else
        {
            AlertMessage = $"Falha ao iniciar o job '{jobName}'.";
        }
        await LoadJobsAsync();
        StateHasChanged();
    }

    /// <summary>
    /// Para um job pelo nome.
    /// </summary>
    private async Task PararJob(string jobName)
    {
        bool sucesso = await JobScheduler.StopJobAsync(jobName);
        if (sucesso)
        {
            AlertMessage = $"Job '{jobName}' parado com sucesso.";
        }
        else
        {
            AlertMessage = $"Falha ao parar o job '{jobName}'.";
        }
        await LoadJobsAsync();
        StateHasChanged();
    }

    /// <summary>
    /// Navega para a página de criação de job.
    /// </summary>
    void CreateJob() => Navigation.NavigateTo("/jobs/create");
    /// <summary>
    /// Navega para a página de edição de job.
    /// </summary>
    void EditJob(int id) => Navigation.NavigateTo($"/jobs/edit/{id}");
    /// <summary>
    /// Navega para a página de exclusão de job.
    /// </summary>
    void DeleteJob(int id) => Navigation.NavigateTo($"/jobs/delete/{id}");

    /// <summary>
    /// Retorna a cor do status do job.
    /// </summary>
    Color GetStatusColor(JobStatus status) => status switch
    {
        JobStatus.Rodando => Color.Info,
        JobStatus.Completado => Color.Success,
        JobStatus.Falhou => Color.Error,
        JobStatus.Parado => Color.Warning,
        _ => Color.Default
    };

    private string AlertStyle => string.IsNullOrEmpty(AlertMessage) ? "display:none" : "display:block";
    private string ErrorAlertStyle => string.IsNullOrEmpty(ErrorMessage) ? "display:none" : "display:block";
    private string ProgressStyle => isLoading ? "visibility:visible" : "visibility:hidden";
}
