@page "/jobs"
@using MudBlazor
@using Saigor.Shared
@inject IJobRepository JobRepository
@inject IJobSchedulerService JobScheduler
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4">Gerenciamento de Jobs</MudText>

    <MudPaper Elevation="1" Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" sm="6">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="CreateJob" 
                          StartIcon="@Icons.Material.Filled.Add" 
                          FullWidth="true">
                    Novo Job
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="6">
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary" 
                          OnClick="RefreshJobs" 
                          StartIcon="@Icons.Material.Filled.Refresh" 
                          FullWidth="true"
                          Disabled="@isLoading">
                    Atualizar
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (isLoading)
    {
        <MudPaper Elevation="1" Class="pa-4">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Class="ml-3">Carregando jobs...</MudText>
        </MudPaper>
    }
    else
    {
        <MudTable Items="jobs" 
                  Hover="true" 
                  Dense="true" 
                  Elevation="1" 
                  Class="mb-4"
                  Loading="@isLoading"
                  Filter="new Func<Job,bool>(FilterFunc)">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString" 
                             Placeholder="Buscar jobs..." 
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             IconSize="Size.Medium" 
                             Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Nome</MudTh>
                <MudTh>Comando</MudTh>
                <MudTh>Agendamento</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Última Execução</MudTh>
                <MudTh>Ações</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Nome">
                    <MudText Typo="Typo.body1" Class="font-weight-medium">@context.Name</MudText>
                </MudTd>
                <MudTd DataLabel="Comando">
                    <MudText Typo="Typo.body2" Class="text-truncate" Style="max-width: 200px;">
                        @context.Command
                    </MudText>
                </MudTd>
                <MudTd DataLabel="Agendamento">
                    <MudChip T="string" Color="Color.Info" Size="Size.Small" Variant="Variant.Outlined">
                        @context.Schedule
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Status">
                    <MudChip T="string" Color="@GetStatusColor(context.Status)" 
                             Variant="Variant.Filled" 
                             Size="Size.Small">
                        @context.Status
                    </MudChip>
                </MudTd>
                <MudTd DataLabel="Última Execução">
                    @if (context.LastExecution.HasValue)
                    {
                        <MudText Typo="Typo.body2">
                            @context.LastExecution.Value.ToBrasiliaTimeString()
                        </MudText>
                    }
                    else
                    {
                        <MudText Typo="Typo.body2" Color="Color.Secondary">
                            Nunca executado
                        </MudText>
                    }
                </MudTd>
                <MudTd DataLabel="Ações">
                    <MudButtonGroup Variant="Variant.Outlined" 
                                   Size="Size.Small" 
                                   Color="Color.Primary">
                        <MudIconButton Icon="@Icons.Material.Filled.Edit" 
                                     OnClick="@(() => EditJob(context.Id))" />
                        <MudIconButton Icon="@Icons.Material.Filled.PlayArrow" 
                                     OnClick="@(() => StartJob(context.Name))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Stop" 
                                     OnClick="@(() => StopJob(context.Name))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                     OnClick="@(() => DeleteJob(context.Id))" 
                                     Color="Color.Error" />
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText Class="m-4" Color="Color.Secondary">
                    Nenhum job encontrado.
                </MudText>
            </NoRecordsContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private List<Job> jobs = new();
    private bool isLoading = true;
    private string searchString = string.Empty;

    protected override async Task OnInitializedAsync()
    {
        await LoadJobsAsync();
    }

    private async Task LoadJobsAsync()
    {
        try
        {
            isLoading = true;
            var jobsEnumerable = await JobRepository.GetAllAsync();
            jobs = jobsEnumerable.ToList();
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao carregar jobs: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task RefreshJobs()
    {
        await LoadJobsAsync();
        Snackbar.Add("Jobs atualizados com sucesso!", Severity.Success);
    }

    private async Task StartJob(string jobName)
    {
        try
        {
            var success = await JobScheduler.StartJobAsync(jobName);
            if (success)
            {
                Snackbar.Add($"Job '{jobName}' iniciado com sucesso!", Severity.Success);
                await LoadJobsAsync();
            }
            else
            {
                Snackbar.Add($"Falha ao iniciar o job '{jobName}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao iniciar job: {ex.Message}", Severity.Error);
        }
    }

    private async Task StopJob(string jobName)
    {
        try
        {
            var success = await JobScheduler.StopJobAsync(jobName);
            if (success)
            {
                Snackbar.Add($"Job '{jobName}' parado com sucesso!", Severity.Success);
                await LoadJobsAsync();
            }
            else
            {
                Snackbar.Add($"Falha ao parar o job '{jobName}'", Severity.Error);
            }
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao parar job: {ex.Message}", Severity.Error);
        }
    }

    private void CreateJob() => Navigation.NavigateTo("/jobs/create");
    private void EditJob(int id) => Navigation.NavigateTo($"/jobs/edit/{id}");
    private void DeleteJob(int id) => Navigation.NavigateTo($"/jobs/delete/{id}");

    private Color GetStatusColor(JobStatus status) => status switch
    {
        JobStatus.Rodando => Color.Info,
        JobStatus.Completado => Color.Success,
        JobStatus.Falhou => Color.Error,
        JobStatus.Parado => Color.Warning,
        JobStatus.Pendente => Color.Default,
        _ => Color.Default
    };

    private bool FilterFunc(Job job)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return job.Name.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               job.Command.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               job.Schedule.Contains(searchString, StringComparison.OrdinalIgnoreCase) ||
               job.Status.ToString().Contains(searchString, StringComparison.OrdinalIgnoreCase);
    }
}
