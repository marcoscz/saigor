@page "/jobs/create"
@using MudBlazor
@inherits Saigor.Pages.Shared.BasePage
@inject IJobRepository JobRepository

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard Elevation="3" Class="mt-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5" Color="Color.Primary">Novo Job</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">Configure um novo job para execução agendada</MudText>
        </MudCardHeader>
        <MudCardContent>
            <JobForm Job="@job" IsProcessing="@isProcessing" OnValidSubmit="SalvarAsync" OnCancel="Cancelar" />
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private JobModel job = new();
    private bool isProcessing;

    protected override void OnInitialized() => job.Status = JobStatus.Pendente;

    private async Task SalvarAsync()
    {
        if (isProcessing) return;
        await ExecuteWithLoadingAsync(async () =>
        {
            isProcessing = true;
            if (await JobRepository.ExistsByNameAsync(job.Name))
            {
                ShowWarning("Já existe um job com este nome!");
                return;
            }
            await JobRepository.AddAsync(job);
            await JobRepository.SaveChangesAsync();
            ShowSuccess("Job criado com sucesso!");
            NavigateTo("/jobs");
        }, "Erro ao salvar o job");
        isProcessing = false;
    }

    private void Cancelar() => NavigateTo("/jobs");
}
