@page "/jobs/create"
@using MudBlazor
@inject IJobRepository JobRepository
@inject NavigationManager Navigation
@inject ISnackbar Snackbar

<MudContainer MaxWidth="MaxWidth.Medium">
    <MudCard Elevation="3" Class="mt-4">
        <MudCardHeader>
            <MudText Typo="Typo.h5" Color="Color.Primary">Novo Job</MudText>
            <MudText Typo="Typo.body2" Color="Color.Secondary">
                Configure um novo job para execução agendada
            </MudText>
        </MudCardHeader>
        
        <MudCardContent>
            <EditForm Model="@job" OnValidSubmit="SalvarAsync">
                <DataAnnotationsValidator />
                <MudGrid Spacing="3">
                    <MudItem xs="12" sm="6">
                        <MudTextField Label="Nome do Job" 
                                    @bind-Value="job.Name" 
                                    For="@(() => job.Name)"
                                    Required="true"
                                    Immediate="true"
                                    Disabled="@isProcessing"
                                    HelperText="Nome único para identificar o job" />
                    </MudItem>

                    <MudItem xs="12" sm="6">
                        <MudSelect T="JobStatus" 
                                 Label="Status Inicial" 
                                 @bind-Value="job.Status"
                                 For="@(() => job.Status)"
                                 Disabled="@isProcessing">
                            <MudSelectItem Value="@JobStatus.Pendente">Pendente</MudSelectItem>
                            <MudSelectItem Value="@JobStatus.Rodando">Rodando</MudSelectItem>
                            <MudSelectItem Value="@JobStatus.Parado">Parado</MudSelectItem>
                        </MudSelect>
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="Comando" 
                                    @bind-Value="job.Command"
                                    For="@(() => job.Command)"
                                    Required="true"
                                    Lines="3"
                                    Immediate="true"
                                    Disabled="@isProcessing"
                                    HelperText="Comando a ser executado (ex: dir, echo 'Hello World')" />
                    </MudItem>

                    <MudItem xs="12">
                        <MudTextField Label="Agendamento (Cron)" 
                                    @bind-Value="job.Schedule"
                                    For="@(() => job.Schedule)"
                                    Required="true"
                                    Immediate="true"
                                    Disabled="@isProcessing"
                                    HelperText="Formato: * * * * * (minuto hora dia mês dia-semana)" />
                        
                        <MudExpansionPanels Class="mt-2">
                            <MudExpansionPanel Text="Exemplos de Cron">
                                <MudList T="string" Dense="true">
                                    <MudListItem T="string">
                                        <MudText Typo="Typo.body2">
                                            <strong>0 0 * * *</strong> - Todo dia à meia-noite
                                        </MudText>
                                    </MudListItem>
                                    <MudListItem T="string">
                                        <MudText Typo="Typo.body2">
                                            <strong>0 */6 * * *</strong> - A cada 6 horas
                                        </MudText>
                                    </MudListItem>
                                    <MudListItem T="string">
                                        <MudText Typo="Typo.body2">
                                            <strong>*/15 * * * *</strong> - A cada 15 minutos
                                        </MudText>
                                    </MudListItem>
                                    <MudListItem T="string">
                                        <MudText Typo="Typo.body2">
                                            <strong>0 9 * * 1</strong> - Toda segunda às 9h
                                        </MudText>
                                    </MudListItem>
                                </MudList>
                            </MudExpansionPanel>
                        </MudExpansionPanels>
                    </MudItem>
                </MudGrid>

                <MudCardActions Class="mt-4">
                    <MudSpacer />
                    <MudButton Variant="Variant.Outlined"
                              Color="Color.Secondary"
                              OnClick="Cancelar"
                              Disabled="@isProcessing">
                        Cancelar
                    </MudButton>
                    <MudButton ButtonType="ButtonType.Submit" 
                              Variant="Variant.Filled" 
                              Color="Color.Primary"
                              Disabled="@isProcessing"
                              StartIcon="@Icons.Material.Filled.Save">
                        @if (isProcessing)
                        {
                            <MudProgressCircular Class="ms-n1" Size="Size.Small" Indeterminate="true"/>
                            <MudText Class="ms-2">Salvando...</MudText>
                        }
                        else
                        {
                            <MudText>Salvar Job</MudText>
                        }
                    </MudButton>
                </MudCardActions>
            </EditForm>
        </MudCardContent>
    </MudCard>
</MudContainer>

@code {
    private Job job = new();
    private bool isProcessing;

    protected override void OnInitialized()
    {
        job.Status = JobStatus.Pendente;
    }

    private async Task SalvarAsync()
    {
        if (isProcessing) return;
        
        try
        {
            isProcessing = true;
            
            // Verificar se já existe um job com o mesmo nome
            if (await JobRepository.ExistsByNameAsync(job.Name))
            {
                Snackbar.Add("Já existe um job com este nome!", Severity.Warning);
                return;
            }
            
            await JobRepository.AddAsync(job);
            
            Snackbar.Add("Job criado com sucesso!", Severity.Success);
            Navigation.NavigateTo("/jobs");
        }
        catch (Exception ex)
        {
            Snackbar.Add($"Erro ao salvar o job: {ex.Message}", Severity.Error);
        }
        finally
        {
            isProcessing = false;
        }
    }

    private void Cancelar()
    {
        if (!isProcessing)
        {
            Navigation.NavigateTo("/jobs");
        }
    }
}
