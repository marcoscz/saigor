@page "/logs"
@using MudBlazor
@inject ApplicationDbContext DbContext
@inject NavigationManager Navigation

<MudText Typo="Typo.h5" Class="mb-4">Logs de Execução</MudText>

<MudTable Items="logs" Hover="true" Dense="true" Elevation="1" Class="mb-4" Breakpoint="Breakpoint.Sm">
    <HeaderContent>
        <MudTh>Job ID</MudTh>
        <MudTh>Data/Hora</MudTh>
        <MudTh>Status</MudTh>
        <MudTh>Ações</MudTh>
    </HeaderContent>
    <RowTemplate>
        <MudTd DataLabel="Job ID">@context.JobId</MudTd>
        <MudTd DataLabel="Data/Hora">@context.ExecutionTime.ToString("dd/MM/yyyy HH:mm:ss")</MudTd>
        <MudTd DataLabel="Status">
            <MudChip T="string" Color="@(context.Status == "Sucesso" ? Color.Success : Color.Error)" Variant="Variant.Filled" Size="Size.Small">
                @context.Status
            </MudChip>
        </MudTd>
        <MudTd DataLabel="Ações">
            <MudButton Variant="Variant.Outlined" Color="Color.Info" Size="Size.Small" OnClick="@(() => VerDetalhes(context.Id))" StartIcon="@Icons.Material.Filled.Info">Detalhes</MudButton>
            <MudButton Variant="Variant.Outlined" Color="Color.Error" Size="Size.Small" OnClick="@(() => ExcluirLog(context.Id))" StartIcon="@Icons.Material.Filled.Delete" Class="ml-2">Excluir</MudButton>
        </MudTd>
    </RowTemplate>
    <NoRecordsContent>
        <MudText Class="m-4">Nenhum log encontrado.</MudText>
    </NoRecordsContent>
</MudTable>

<MudProgressLinear Indeterminate="true" Color="Color.Primary" Style="@ProgressStyle" />

<MudAlert Severity="Severity.Error" Elevation="0" Dense="true" Class="mb-2" Style="@ErrorAlertStyle">
    @ErrorMessage
</MudAlert>

@code {
    private List<Log> logs = new();
    private bool isLoading = true;
    private string? ErrorMessage;

    /// <summary>
    /// Inicializa o componente e carrega os logs.
    /// </summary>
    protected override async Task OnInitializedAsync()
    {
        isLoading = true;
        await LoadLogsAsync();
        isLoading = false;
    }

    /// <summary>
    /// Carrega a lista de logs do banco de dados.
    /// </summary>
    private async Task LoadLogsAsync()
    {
        try
        {
            logs = await Task.Run(() => DbContext.Logs.OrderByDescending(l => l.ExecutionTime).ToList());
            ErrorMessage = null;
        }
        catch (Exception ex)
        {
            ErrorMessage = $"Erro ao carregar logs: {ex.Message}";
        }
    }

    /// <summary>
    /// Navega para a página de detalhes do log.
    /// </summary>
    void VerDetalhes(int id) => Navigation.NavigateTo($"/logs/details/{id}");
    /// <summary>
    /// Navega para a página de exclusão do log.
    /// </summary>
    void ExcluirLog(int id) => Navigation.NavigateTo($"/logs/delete/{id}");

    private string ProgressStyle => isLoading ? "visibility:visible" : "visibility:hidden";
    private string ErrorAlertStyle => string.IsNullOrEmpty(ErrorMessage) ? "display:none" : "display:block";
}
