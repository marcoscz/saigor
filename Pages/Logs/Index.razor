@page "/logs"
@using MudBlazor
@using Saigor.Shared
@inject ILogRepository LogRepository
@inject NavigationManager Navigation
@inject ISnackbar Snackbar
@inject ILogger<Index> _logger
@inject IJobRepository JobRepository

<MudContainer MaxWidth="MaxWidth.ExtraLarge">
    <MudText Typo="Typo.h4" Class="mb-4" Color="Color.Primary">Logs de Execução</MudText>

    <!-- Filtros -->
    <MudPaper Elevation="1" Class="pa-4 mb-4">
        <MudGrid>
            <MudItem xs="12" sm="6" md="3">
                <MudSelect T="int?" Label="Job" @bind-Value="selectedJobId" Clearable="true">
                    <MudSelectItem Value="@((int?)null)">Todos</MudSelectItem>
                    @foreach (var job in jobs)
                    {
                        <MudSelectItem Value="@((int?)job.Id)">@job.Name</MudSelectItem>
                    }
                </MudSelect>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudDateRangePicker @bind-DateRange="dateRange" Label="Período" />
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudButton Variant="Variant.Filled" 
                          Color="Color.Primary" 
                          OnClick="ApplyFilters" 
                          StartIcon="@Icons.Material.Filled.FilterList" 
                          FullWidth="true">
                    Filtrar
                </MudButton>
            </MudItem>
            <MudItem xs="12" sm="6" md="3">
                <MudButton Variant="Variant.Outlined" 
                          Color="Color.Secondary" 
                          OnClick="ClearFilters" 
                          StartIcon="@Icons.Material.Filled.Clear" 
                          FullWidth="true">
                    Limpar
                </MudButton>
            </MudItem>
        </MudGrid>
    </MudPaper>

    @if (isLoading)
    {
        <MudPaper Elevation="1" Class="pa-4">
            <MudProgressCircular Color="Color.Primary" Indeterminate="true" />
            <MudText Class="ml-3">Carregando logs...</MudText>
        </MudPaper>
    }
    else
    {
        <MudTable Items="filteredLogs" 
                  Hover="true" 
                  Dense="true" 
                  Elevation="1" 
                  Class="mb-4"
                  Loading="@isLoading"
                  Filter="new Func<Log,bool>(FilterFunc)"
                  SortLabel="Ordenar por">
            <ToolBarContent>
                <MudTextField @bind-Value="searchString" 
                             Placeholder="Buscar logs..." 
                             Adornment="Adornment.Start" 
                             AdornmentIcon="@Icons.Material.Filled.Search" 
                             IconSize="Size.Medium" 
                             Class="mt-0">
                </MudTextField>
            </ToolBarContent>
            <HeaderContent>
                <MudTh>Job</MudTh>
                <MudTh>Data/Hora</MudTh>
                <MudTh>Status</MudTh>
                <MudTh>Saída</MudTh>
                <MudTh>Ações</MudTh>
            </HeaderContent>
            <RowTemplate>
                <MudTd DataLabel="Job">
                    <MudText Typo="Typo.body1" Class="font-weight-medium">@context.Job?.Name</MudText>
                    <MudText Typo="Typo.caption" Color="Color.Secondary">ID: @context.JobId</MudText>
                </MudTd>
                <MudTd DataLabel="Data/Hora">
                                            <MudText Typo="Typo.body2">
                            @context.ExecutionTime.ToBrasiliaTimeString()
                        </MudText>
                </MudTd>
                <MudTd DataLabel="Status">
                    <StatusChip JobStatus="@((JobStatus)(string.IsNullOrEmpty(context.Status) ? JobStatus.Pendente : Enum.Parse(typeof(JobStatus), context.Status)))" />
                </MudTd>
                <MudTd DataLabel="Saída">
                    <MudText Typo="Typo.body2" Class="text-truncate" Style="max-width: 200px;">
                        @(string.IsNullOrEmpty(context.Output) ? "N/A" : context.Output)
                    </MudText>
                </MudTd>
                <MudTd DataLabel="Ações">
                    <MudButtonGroup Variant="Variant.Outlined" 
                                   Size="Size.Small" 
                                   Color="Color.Primary">
                        <MudIconButton Icon="@Icons.Material.Filled.Info" 
                                     OnClick="@(() => VerDetalhes(context.Id))" />
                        <MudIconButton Icon="@Icons.Material.Filled.Delete" 
                                     OnClick="@(() => ExcluirLog(context.Id))" 
                                     Color="Color.Error" />
                    </MudButtonGroup>
                </MudTd>
            </RowTemplate>
            <NoRecordsContent>
                <MudText Class="m-4" Color="Color.Secondary">
                    Nenhum log encontrado.
                </MudText>
            </NoRecordsContent>
            <PagerContent>
                <MudTablePager />
            </PagerContent>
        </MudTable>
    }
</MudContainer>

@code {
    private List<Log> logs = new();
    private List<Log> filteredLogs = new();
    private List<Job> jobs = new();
    private bool isLoading = true;
    private string searchString = string.Empty;
    private int? selectedJobId;
    private DateRange? dateRange;

    protected override async Task OnInitializedAsync()
    {
        await LoadJobsAsync();
        await LoadLogsAsync();
    }

    private async Task LoadLogsAsync()
    {
        try
        {
            isLoading = true;
            var logsEnumerable = await LogRepository.GetAllAsync();
            logs = logsEnumerable.ToList();
            filteredLogs = logs.OrderByDescending(l => l.ExecutionTime).ToList();
            _logger.LogInformation("Carregados {Count} logs", logs.Count);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao carregar logs");
            Snackbar.Add($"Erro ao carregar logs: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private async Task LoadJobsAsync()
    {
        var jobsEnumerable = await JobRepository.GetAllAsync();
        jobs = jobsEnumerable.ToList();
    }

    private async Task ApplyFilters()
    {
        try
        {
            isLoading = true;
            
            if (dateRange?.Start != null && dateRange?.End != null)
            {
                filteredLogs = (await LogRepository.GetByDateRangeAsync(dateRange.Start.Value, dateRange.End.Value)).OrderByDescending(l => l.ExecutionTime).ToList();
            }
            else if (selectedJobId != null)
            {
                filteredLogs = logs.Where(l => l.JobId == selectedJobId).OrderByDescending(l => l.ExecutionTime).ToList();
            }
            else
            {
                filteredLogs = logs.OrderByDescending(l => l.ExecutionTime).ToList();
            }

            // Aplicar filtro de texto se houver
            if (!string.IsNullOrEmpty(searchString))
            {
                filteredLogs = filteredLogs.Where(l => 
                    l.Job?.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
                    l.Status?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
                    l.Output?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true
                ).ToList();
            }

            Snackbar.Add($"Filtros aplicados: {filteredLogs.Count} logs encontrados", Severity.Info);
        }
        catch (Exception ex)
        {
            _logger.LogError(ex, "Erro ao aplicar filtros");
            Snackbar.Add($"Erro ao aplicar filtros: {ex.Message}", Severity.Error);
        }
        finally
        {
            isLoading = false;
        }
    }

    private void ClearFilters()
    {
        selectedJobId = null;
        dateRange = null;
        searchString = string.Empty;
        filteredLogs = logs;
        Snackbar.Add("Filtros limpos", Severity.Info);
    }

    private bool FilterFunc(Log log)
    {
        if (string.IsNullOrWhiteSpace(searchString))
            return true;

        return log.Job?.Name?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               log.Status?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true ||
               log.Output?.Contains(searchString, StringComparison.OrdinalIgnoreCase) == true;
    }

    private void VerDetalhes(int id) => Navigation.NavigateTo($"/logs/details/{id}");
    
    private void ExcluirLog(int id) => Navigation.NavigateTo($"/logs/delete/{id}");

    private Color GetStatusColor(string? status) => status switch
    {
        "Completado" => Color.Success,
        "Falhou" => Color.Error,
        "Rodando" => Color.Info,
        _ => Color.Default
    };
}
